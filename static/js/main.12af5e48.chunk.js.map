{"version":3,"sources":["components/Message/Message.module.css","Names.module.css","components/MyName/MyName.module.css","ButtonArea.module.css","components/Avatar/avatar.png","components/Avatar/Avatar.module.css","logo.svg","components/MyName/MyName.jsx","components/Message/Message.jsx","components/Avatar/Avatar.jsx","Name.jsx","Names.jsx","Button.jsx","Text.jsx","ButtonArea.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","MyName","className","classes","name1","name2","Message","addQualities","this","props","quality","map","activeClassName","active","activeClass","key","id","title","message","author","content","time","Date","toLocaleTimeString","hour","minute","React","Component","Avatar","avatar","src","alt","Name","name","Names","namesNew","names","item","Button","newCountRef","createRef","onAddNewName","newName","current","value","onAddName","ref","type","onClick","Text","counter","ButtonArea","buttonArea","text","App","state","qualities","newText","newNames","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.12af5e48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3lhuG\",\"author\":\"Message_author__sa7IK\",\"content\":\"Message_content__16pb9\",\"time\":\"Message_time__1tvkz\",\"activeClass\":\"Message_activeClass__2-aB3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"names\":\"Names_names__2NsRc\",\"item\":\"Names_item__1ZBLy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name1\":\"MyName_name1__1iV0R\",\"name2\":\"MyName_name2__fKJ8h\",\"anim\":\"MyName_anim__2NKH4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonArea\":\"ButtonArea_buttonArea__1_8Eg\",\"text\":\"ButtonArea_text__2IUEU\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.adf3f16b.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__1aB0C\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport classes from './MyName.module.css'\n\n\nconst MyName = () => {\n    return (<div>\n            <p className={classes.name1}>Кострома Оксана Владимировна</p>\n            <p className={classes.name2}>Magic</p>\n        </div>\n    );\n}\n\nexport default MyName;\n","import React from 'react';\nimport classes from './Message.module.css'\n\n\nclass Message extends React.Component {\n\n\n\n\n    render() {\n        let addQualities = this.props.quality.map(quality => {\n            let activeClassName = quality.active ? classes.activeClass : '';\n            return <span key={quality.id} className={activeClassName}>{quality.title + ' | '}</span>\n        });\n\n        return (\n            <div className={classes.message}>\n                <p className={classes.author}>Кострома Оксана</p>\n                <p className={classes.content}>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit olore eu fugiat nulla pariatur.\n                    Lorem ipsum dolor sit amet.\n                </p>\n                {addQualities}\n                <p className={classes.time}> {new Date().toLocaleTimeString('ru-RU', {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                })}</p>\n\n            </div>\n\n        );\n    }\n}\n\nexport default Message;\n","import React from 'react';\nimport avatar from './avatar.png'\nimport classes from './Avatar.module.css'\n\n\nconst Avatar = () => {\n    return (<div>\n            <img className={classes.avatar} src={avatar} alt=\"avatar\"/>\n        </div>\n\n    );\n}\n\nexport default Avatar;\n","import React from 'react';\nimport classes from './Names.module.css'\n\n\n\nclass Name extends React.Component {\n\n\n    render() {\n\n\n        return (\n            <div>\n                <span> {this.props.name}</span>\n\n            </div>\n        );\n    }\n}\n\nexport default Name;\n","import React from 'react';\nimport classes from './Names.module.css'\nimport Name from \"./Name\";\n\n\n\nclass Names extends React.Component {\n\n\n    render() {\n        let namesNew = this.props.names.map(name => <Name name={name.name}/>)\n\n\n        return (\n            <div className={classes.names}>\n                <div className={classes.item}>\n                    <span>{namesNew}</span>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default Names;\n","import React from 'react';\n\n\n\n\nclass Button extends React.Component {\n    newCountRef = React.createRef();\n\n\n\n    onAddNewName = () => {\n        let newName = this.newCountRef.current.value;\n        this.newCountRef.current.value = '';\n        this.props.onAddName(newName)\n\n    }\n\n\n    render() {\n\n\n        return (\n            <div>\n                <input ref={this.newCountRef} type=\"text\"/>\n                <button onClick={this.onAddNewName} > Click </button>\n            </div>\n        );\n    }\n}\n\nexport default Button;\n","import React from 'react';\n\n\n\n\nclass Text extends React.Component {\n\n\n    render() {\n\n\n        return (\n            <div>\n                <span>{this.props.counter} ~ </span>\n            </div>\n        );\n    }\n}\n\nexport default Text;\n","import React from 'react';\nimport Button from \"./Button\";\nimport Text from \"./Text\";\nimport classes from './ButtonArea.module.css'\n\n\n\nclass ButtonArea extends React.Component {\n\n\n\n\n    render() {\n\n\n\n        return (\n            <div>\n                <div className={classes.buttonArea}>\n                    <div className={classes.text}>\n                        <Text counter={this.props.counter}/>\n                    </div>\n\n                    <Button onAddName={this.props.onAddName}/>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default ButtonArea;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyName from \"./components/MyName/MyName\";\nimport Message from \"./components/Message/Message\";\nimport Avatar from \"./components/Avatar/Avatar\";\nimport Names from \"./Names\";\nimport ButtonArea from \"./ButtonArea\";\n\n\nclass App extends React.Component {\n\nstate = {\n    qualities: [\n        {id: 0, title: 'good-tempered', active: false},\n        {id: 1, title: 'funny', active: true},\n        {id: 2, title: 'responsible', active: false},\n        {id: 3, title: 'kind', active: false}\n    ],\n    counter: 1,\n    names: [\n        {id: 0, name: 'Oxa'}\n    ]\n}\n\n\n    onAddName = (newName) => {\n\n         let newText = {\n             id: 3,\n             name: newName\n         }\n\n         let newNames = [...this.state.names, newText]\n\n\n        this.setState({\n            names: newNames,\n            counter: this.state.counter + 1\n\n        });\n    }\n\n\n\n    render() {\n\n\n        return (\n            <div className=\"App\">\n                <MyName/>\n                <Avatar/>\n                <Message quality={this.state.qualities} />\n                <ButtonArea counter={this.state.counter}  onAddName={this.onAddName}/>\n                <Names  names={this.state.names}/>\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}